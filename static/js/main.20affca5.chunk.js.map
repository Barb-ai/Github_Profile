{"version":3,"sources":["Sever/Api.js","components/Chart.js","components/User.js","components/TopRepo.js","pages/Main.js","pages/Userinput.js","App.js","index.js"],"names":["url","getData","username","a","changeableUrl","axios","get","data","name","company","location","created_at","updated_at","email","followers","bio","avatar_url","login","public_repos","getRepoData","map","stargazers_count","language","forks","size","description","getLanguageData","i","languages","languageStars","languageForks","forEach","item","Language","languagesArr","obj","stars","count","push","getSum","totalstar","totalfork","forks_count","Chart","useParams","useState","setlanguagesArr","useEffect","fetchlanguages","User","userData","setUserData","userSum","setSum","fetchUser","fetchSum","TopRepo","repoData","setRepoData","type","setType","fetchRepo","sort","b","class","className","label","checked","value","onClick","Card","Group","centered","itemsPerRow","slice","repo","Content","header","extra","Icon","Main","props","Userinput","setUsername","history","useHistory","IconGithub","github","onSubmit","e","preventDefault","onChange","target","App","path","component","UserInput","ReactDOM","render","document","getElementById"],"mappings":"2WAEMA,EAAM,+BAECC,EAAO,uCAAG,WAAOC,GAAP,2CAAAC,EAAA,6DACjBC,EAAgBJ,EAEhBE,IACFE,EAAa,UAAMJ,EAAN,YAAaE,IAJP,kBAmBPG,IAAMC,IAAIF,GAnBH,2BAQXG,KACJC,EATe,EASfA,KACAC,EAVe,EAUfA,QACAC,EAXe,EAWfA,SACAC,EAZe,EAYfA,WACAC,EAbe,EAafA,WACAC,EAde,EAcfA,MACAC,EAfe,EAefA,UACAC,EAhBe,EAgBfA,IACAC,EAjBe,EAiBfA,WAAWhB,EAjBI,EAiBJA,IACbiB,EAlBiB,EAkBjBA,MAAMC,EAlBW,EAkBXA,aAlBW,kBAqBZ,CAACV,OACNC,UACAE,aACAC,aACAF,WACAG,QACAC,YACAC,MACAC,aAAWhB,MACbiB,QAAMC,iBA9Ba,2HAAH,sDAoCPC,EAAW,uCAAC,WAAOjB,GAAP,mBAAAC,EAAA,6DACnBC,EAAgBJ,EAEhBE,IACFE,EAAa,UAAMJ,EAAN,YAAaE,EAAb,WAJQ,kBAOAG,IAAMC,IAAIF,GAPV,uBAObG,EAPa,EAObA,KAPa,kBAQdA,EAAKa,KAAI,kBAQd,CACEC,iBATY,EACZA,iBASEC,SAVU,EAEZA,SASEC,MAXU,EAGZA,MASEC,KAZU,EAIZA,KASEhB,KAbU,EAKZA,KASAiB,YAdY,EAMdA,iBAdmB,2HAAD,sDAsCXC,EAAe,uCAAC,WAAOxB,GAAP,6BAAAC,EAAA,sEACNE,IAAMC,IAAN,UAAaN,EAAb,YAAoBE,EAApB,WADM,OAmB3B,IAASyB,KAnBkB,SACnBpB,EADmB,EACnBA,KAEFqB,EAAY,GACZC,EAAgB,GAChBC,EAAc,GACpBvB,EAAKwB,SAAQ,SAAAC,GACPA,EAAKV,UACPM,EAAUI,EAAKV,UAAYM,EAAUI,EAAKV,WAAa,EAAIM,EAAUI,EAAKV,UAAY,EACtFO,EAAcG,EAAKV,UAAYO,EAAcG,EAAKC,WAAaD,EAAKX,kBAAmB,EAAGQ,EAAcG,EAAKV,UAAWU,EAAKX,kBAAmB,EAChJS,EAAcE,EAAKV,UAAYQ,EAAcE,EAAKC,WAAaD,EAAKT,OAAQ,EAAGO,EAAcE,EAAKV,UAAWU,EAAKT,OAAQ,IAG1HK,EAAS,QAAcA,EAAS,SAAe,EAAIA,EAAS,QAAc,EAC1EC,EAAa,QAAeD,EAAS,SAAeI,EAAKX,kBAAmB,EAAGQ,EAAa,SAAeG,EAAKX,kBAAkB,EAClIS,EAAa,QAAcA,EAAa,SAAeE,EAAKT,OAAQ,EAAGO,EAAa,QAAaE,EAAKT,OAAQ,MAG5GW,EAAe,GACPN,EACNO,EAAM,CACVb,SAAUK,EACVS,MAAOP,EAAcF,IAAM,EAC3BU,MAAOT,EAAUD,GACjBJ,MAAMO,EAAcH,IAAI,GAE1BO,EAAaI,KAAKH,GA1BO,yBA6BpBD,GA7BoB,4CAAD,sDA+BfK,EAAM,uCAAC,WAAOrC,GAAP,qBAAAC,EAAA,sEACGE,IAAMC,IAAN,UAAaN,EAAb,YAAoBE,EAApB,WADH,uBACVK,EADU,EACVA,KACJiC,EAAU,EACVC,EAAU,EACdlC,EAAKwB,SAAQ,SAAAC,GACXQ,GAAWR,EAAKX,kBAAmB,EACnCoB,GAAWT,EAAKU,aAAc,KANd,kBAQX,CAACF,YAAUC,cARA,2CAAD,sD,QCmDJE,G,OA3JD,WACZ,IAAMzC,EAAS0C,cAAY1C,SADT,EAEsB2C,mBAAS,IAF/B,mBAEXX,EAFW,KAEGY,EAFH,KAMlBC,qBAAU,YACY,uCAAG,sBAAA5C,EAAA,kEACrB2C,EADqB,SACCpB,EAAgBxB,GADjB,6EAAH,qDAGpB8C,KAEC,IAGA,IAIWd,EAAad,KAAI,qBAAEE,YAEnBY,EAAad,KAAI,qBAAEiB,SAoC1B,IAIWH,EAAad,KAAI,qBAAEE,YAEnBY,EAAad,KAAI,qBAAEgB,SAmC1B,IAIWF,EAAad,KAAI,qBAAEE,YAEnBY,EAAad,KAAI,qBAAEG,W,SCH5B0B,G,OApGF,WACX,IAAM/C,EAAS0C,cAAY1C,SADV,EAEe2C,mBAAS,IAFxB,mBAEVK,EAFU,KAEAC,EAFA,OAGSN,mBAAS,IAHlB,mBAGVO,EAHU,KAGDC,EAHC,KAIjBN,qBAAU,WACR,IAAMO,EAAS,uCAAG,sBAAAnD,EAAA,kEAChBgD,EADgB,SACElD,EAAQC,GADV,6EAAH,qDAGTqD,EAAQ,uCAAG,sBAAApD,EAAA,kEACfkD,EADe,SACFd,EAAOrC,GADL,6EAAH,qDAIdoD,IACAC,MACC,IAMCL,EAAShC,aAKTgC,EAASpC,UAKTsC,EAAQZ,UAKRY,EAAQX,Y,QC8BCe,G,OAjEC,WACd,IAAMtD,EAAS0C,cAAY1C,SADP,EAEY2C,mBAAS,IAFrB,mBAEbY,EAFa,KAEHC,EAFG,OAGIb,mBAAS,oBAHb,mBAGbc,EAHa,KAGPC,EAHO,KAIpBb,qBAAU,YACO,uCAAG,sBAAA5C,EAAA,kEAChBuD,EADgB,SACEvC,EAAYjB,GADd,6EAAH,qDAIf2D,KACC,IAEHJ,EAASK,MAAK,SAAC3D,EAAG4D,GACZ,MAAW,qBAAPJ,EACExD,EAAEkB,iBAAmB0C,EAAE1C,kBAA0B,EAC5ClB,EAAEkB,iBAAmB0C,EAAE1C,iBAAyB,EAClD,EACM,SAAPsC,EAEFxD,EAAEqB,KAAOuC,EAAEvC,MAAc,EACpBrB,EAAEqB,KAAOuC,EAAEvC,KAAa,EAC1B,EAIDrB,EAAEoB,MAAQwC,EAAExC,OAAe,EACtBpB,EAAEoB,MAAQwC,EAAExC,MAAc,EAC5B,KAMf,OACE,yBAAKyC,MAAM,WACX,2BAAOC,UAAU,aAAjB,4BACA,0BAAMA,UAAU,QACZ,2BAAON,KAAK,QAAQnD,KAAK,SAAS0D,MAAM,QAAQC,QAAkB,qBAATR,EAA6BS,MAAM,mBAAmBC,QAAS,kBAAMT,EAAQ,uBACtI,uCACA,2BAAOD,KAAK,QAAQnD,KAAK,SAAQ0D,MAAM,QAAQC,QAAkB,UAATR,EAAkBS,MAAM,QAAQC,QAAS,kBAAMT,EAAQ,YAC/G,wCACA,2BAAOD,KAAK,QAAQnD,KAAK,QAAQ0D,MAAM,OAAOC,QAAkB,SAATR,EAAiBS,MAAM,OAAOC,QAAS,kBAAMT,EAAQ,WAC5G,wCAIJ,kBAACU,EAAA,EAAKC,MAAN,CAAYC,UAAQ,EAACC,YAAa,GACjChB,EAASiB,MAAM,EAfN,GAeetD,KAAI,SAAAuD,GAAI,OAC7B,kBAACL,EAAA,EAAD,KACA,kBAACA,EAAA,EAAKM,QAAN,CAAcC,OAAQF,EAAKnE,OAC3B,kBAAC8D,EAAA,EAAKM,QAAN,CAAcnD,YAAakD,EAAKlD,cAChC,kBAAC6C,EAAA,EAAKM,QAAN,CAAcE,OAAK,GAEjB,kBAACC,EAAA,EAAD,CAAMvE,KAAK,SAFb,IAEwBmE,EAAKtD,iBAF7B,WAGE,kBAAC0D,EAAA,EAAD,CAAMvE,KAAK,SAHb,IAGwBmE,EAAKpD,MAH7B,WAIE,kBAACwD,EAAA,EAAD,CAAMvE,KAAK,SAJb,IAIwBmE,EAAKnD,KAJ7B,eCxCKwD,G,OAXF,SAAAC,GACX,OACE,yBAAKhB,UAAU,SACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCqBSiB,G,OA3BI,SAAAD,GAAS,IAAD,EACOpC,mBAAS,UADhB,mBAClB3C,EADkB,KACRiF,EADQ,KAGrBC,EAAUC,cACRC,EAAa,kBAAM,kBAACP,EAAA,EAAD,CAAMQ,QAAM,EAAC/E,KAAK,YAE3C,OACE,yBAAKyD,UAAU,aACb,0BAAMA,UAAU,QAAQuB,SAAU,SAAAC,GAC9BA,EAAEC,iBACFN,EAAQ9C,KAAK,IAAIpC,EAAS,cAG5B,2BAAO+D,UAAU,SACf,kBAACqB,EAAD,MADF,2BAKA,2BAAOrB,UAAU,QACfzD,KAAK,WACLmD,KAAK,OACLgC,SAnBa,SAAAF,GAAC,OAAIN,EAAYM,EAAEG,OAAOxB,cCelCyB,EAZJ,WACP,OACG,kBAAC,IAAD,KACE,kBAAC,IAAD,KACM,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWf,IAC/B,kBAAC,IAAD,CAAOc,KAAK,qBAAqBC,UAAWf,IAC5C,kBAAC,IAAD,CAAOc,KAAK,IAAIC,UAAWC,OCZ1CC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.20affca5.chunk.js","sourcesContent":["import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nconst url = 'https://api.github.com/users';\n\nexport const getData = async (username) => {\n  let changeableUrl = url;\n\n  if (username) {\n    changeableUrl = `${url}/${username}`;\n  }\n\n  try {\n    const { data:\n      { name,\n        company,\n        location,\n        created_at,\n        updated_at,\n        email,\n        followers,\n        bio,\n        avatar_url,url,\n      login,public_repos }\n      } = await axios.get(changeableUrl);\n\n    return {name,\n      company,\n      created_at,\n      updated_at,\n      location,\n      email,\n      followers,\n      bio,\n      avatar_url,url,\n    login,public_repos };\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const getRepoData=async (username)=>{\n  let changeableUrl = url;\n\n  if (username) {\n    changeableUrl = `${url}/${username}/repos`;\n  }\n  try {\n    const { data }=await axios.get(changeableUrl);\n    return data.map((\n      { stargazers_count,\n        language,\n        forks,\n        size,\n        name,\n      description})=>\n    (\n      {\n        stargazers_count,\n          language,\n          forks,\n          size,\n          name,\n        description}));\n  }\n   catch (error) {\n    return error;\n  }\n}\n\nexport const getRepoName=async (username)=>{\n  const { data }=await axios.get(`${url}/${username}/repos`);\n  const name=[]\n  data.forEach(item => {\n    name.push(item.name);\n  })\n  return name\n}\n\nexport const getLanguageData=async (username)=>{\n  const { data }=await axios.get(`${url}/${username}/repos`);\n\n  const languages = {}\n  const languageStars = {}\n  const languageForks={}\n  data.forEach(item => {\n    if (item.language) {\n      languages[item.language] ? languages[item.language] += 1 : languages[item.language] = 1\n      languageStars[item.language] ? languageStars[item.Language] += item.stargazers_count|| 0 :languageStars[item.language] =item.stargazers_count|| 0\n      languageForks[item.language] ? languageForks[item.Language] += item.forks|| 0 :languageForks[item.language] =item.forks|| 0\n\n    } else {\n      languages['Unknown'] ? languages['Unknown'] += 1 : languages['Unknown'] = 1\n      languageStars['Unknown']  ? languages['Unknown'] += item.stargazers_count|| 0: languageStars['Unknown'] += item.stargazers_count||0\n      languageForks['Unknown'] ? languageForks['Unknown'] += item.forks|| 0 :languageForks['Unknown'] =item.forks|| 0\n    }\n  })\n  const languagesArr = []\n  for (let i in languages) {\n    const obj = {\n      language: i,\n      stars: languageStars[i] || 0,\n      count: languages[i],\n      forks:languageForks[i]||0\n    }\n    languagesArr.push(obj)\n\n  }\n  return languagesArr\n}\nexport const getSum=async (username)=>{\n  const { data }=await axios.get(`${url}/${username}/repos`);\n  var totalstar=0\n  var totalfork=0\n  data.forEach(item => {\n    totalstar+=item.stargazers_count|| 0\n    totalfork+=item.forks_count|| 0\n  })\n  return {totalstar,totalfork}\n}\n","import React, { useState, useEffect } from 'react';\nimport { getLanguageData } from '../Sever/Api';\nimport {Doughnut,Polar} from 'react-chartjs-2';\nimport { useParams } from \"react-router-dom\";\nimport { Grid,Card} from 'semantic-ui-react';\nconst Chart = () => {\n  const username=useParams().username;\n  const [languagesArr, setlanguagesArr] = useState([]);\n  const width=50\n  const height=350\n  const size=120\n  useEffect(() => {\n    const fetchlanguages = async () => {\n      setlanguagesArr(await getLanguageData(username));\n    };\n    fetchlanguages();\n\n  }, []);\n\n  const PolarChart = (\n    <Polar\n      width={width}\n      height={height}\n      data={{\n        labels: languagesArr.map(({language }) => language),\n        datasets: [{\n          data: languagesArr.map(({count}) => count),\n          label: 'Lanuage',\n          borderColor: 'Gray',\n          hoverBackgroundColor: 'white',\n          hoverBorderColor: 'Gray',\n          borderWidth: 1,\n          backgroundColor: ['LightSteelBlue', 'PeachPuff','LemonChiffon','PowderBlue', 'LavenderBlush','Pink','LightGray','SandyBrown','PaleGoldenRod','LightCoral','PaleVioletRed'],\n          fill: true}]\n        }}\n          options={\n            {\n              legend: { display: true },\n              title: {\n                display: true,\n                text: `Number of Repos Per Language` ,\n                fontSize: 20,\n                fontFamily: 'Mono',\n                fontColor: '#2F4F4F'\n              },\n              maintainAspectRatio: false,\n               responsive: true,\n               layout: {\n                  padding: {\n                      top: 34,\n                      left: 15,\n                      right: 15,\n                      bottom: 15\n                  }\n                }\n            }\n          }\n            />\n\n      );\n\n      const doughnutChart_star = (\n        <Doughnut\n          width={width}\n          height={height}\n          data={{\n            labels: languagesArr.map(({language }) => language),\n            datasets: [{\n              data: languagesArr.map(({stars }) => stars),\n              label: 'language',\n              borderColor: 'Gray',\n              hoverBackgroundColor: 'Gray',\n              hoverBorderColor: 'Gray',\n              backgroundColor: ['LightSteelBlue', 'PeachPuff','LemonChiffon','PowderBlue', 'LavenderBlush','Pink','LightGray','SandyBrown','PaleGoldenRod','LightCoral','PaleVioletRed'],\n              fill: true}]\n            }}\n\n              options={{\n                  legend: {\n                    display: true,\n                    position:'bottom'\n                  },\n                  title: { display: true,\n                    text: `Stars Count Per Language`,\n                    fontSize: 20,\n                    fontFamily: 'Mono',\n                    fontColor: '#2F4F4F' },\n                  responsive: true,\n                  maintainAspectRatio: false,\n                  layout: {\n                     padding: {\n                         top: 34,\n                         left: 15,\n                         right: 15,\n                         bottom: 15\n                     }\n                   }\n                }}\n\n              />\n          );\n\n          const doughnutChart_fork = (\n            <Doughnut\n              width={width}\n              height={height}\n              data={{\n                labels: languagesArr.map(({language }) => language),\n                datasets: [{\n                  data: languagesArr.map(({forks }) => forks),\n                  label: 'language',\n                  borderColor: 'Gray',\n                  hoverBackgroundColor: 'Gray',\n                  hoverBorderColor: 'Gray',\n                  backgroundColor: ['LightSteelBlue', 'PeachPuff','LemonChiffon','PowderBlue', 'LavenderBlush','Pink','LightGray','SandyBrown','PaleGoldenRod','LightCoral','PaleVioletRed'],\n                  fill: true}],}}\n\n                  options={{\n                      legend: { display: true,position:'bottom'  },\n                      title: { display: true,\n                        text: `Forks Count Per Language`,\n                        fontSize: 20,\n                        fontFamily: 'Mono',\n                        fontColor: '#2F4F4F' },\n                      responsive: true,\n                      maintainAspectRatio: false,\n                      layout: {\n                         padding: {\n                             top: 34,\n                             left: 15,\n                             right: 15,\n                             bottom: 15\n                         }\n                       }\n                    }}\n\n                  />\n              );\n          return (\n           //console.log(languagesArr),\n            <Grid >\n              <Grid.Row >\n                <Grid.Column >\n                {PolarChart}\n                </Grid.Column>\n              </Grid.Row>\n\n              <Grid.Row centered columns={2}>\n                <Grid.Column mobile={16} tablet={8} computer={5}>\n                {doughnutChart_star }\n                </Grid.Column>\n                <Grid.Column mobile={16} tablet={8} computer={5}>\n                {doughnutChart_fork }\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n\n          );\n}\n\nexport default Chart;\n","import React, { useState, useEffect } from 'react';\nimport { getData,getSum } from '../Sever/Api';\nimport { useParams } from 'react-router-dom';\nimport { Card} from 'semantic-ui-react';\nimport './User.css';\n\nconst User = () => {\n  const username=useParams().username;\n  const [userData, setUserData] = useState([]);\n  const [userSum, setSum] = useState([]);\n  useEffect(() => {\n    const fetchUser = async () => {\n      setUserData(await getData(username));\n    };\n    const fetchSum = async () => {\n      setSum(await getSum(username));\n    };\n\n    fetchUser();\n    fetchSum();\n  }, []);\n\n  const items = [\n  {\n    header: 'Repos',\n    description:\n      userData.public_repos\n  },\n  {\n    header: 'Followers',\n    description:\n      userData.followers\n  },\n  {\n    header: 'Stars',\n    description:\n      userSum.totalstar\n  },\n  {\n    header: 'Forks',\n    description:\n      userSum.totalfork\n  }\n]\n\n  return(\n      //console.log(userData),\n\n      <div className='profile'>\n        {userData.avatar_url && (\n          <div className='avatar'>\n            <img src={userData.avatar_url} alt=\"avatar\" />\n          </div>\n        )}\n\n        {userData.name &&\n          <h1>\n            {userData.name}\n            (@{userData.login})\n          </h1>\n        }\n        {!userData.name &&\n          <h1>\n          <i aria-hidden=\"true\" class=\"at icon\"></i>\n            {userData.login}\n          </h1>\n        }\n        {userData.bio &&\n          <h2>\n            <i aria-hidden=\"true\" class=\"map pin icon\"></i>\n            {userData.bio}\n          </h2>\n        }\n        <div className=\"info\">\n        {userData.location &&\n          <h3>\n            <i aria-hidden=\"true\" class=\"map marker icon\"></i>\n            {userData.location}\n          </h3>\n        }\n\n        {userData.company &&\n          <h3>\n          <i aria-hidden=\"true\" class=\"building outline icon\"></i>\n            {userData.company}\n          </h3>\n        }\n        {userData.created_at &&\n          <h3>\n          <i aria-hidden=\"true\" class=\"calendar alternate outline icon\"></i>\n            Joined{' '}\n              {new Date(userData.created_at).toLocaleDateString('en-US', {\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n              }\n            )\n            }\n          </h3>\n        }\n      </div>\n      <Card.Group centered  items={items}  />\n      </div>\n  );\n}\n\nexport default User;\n","import React, { useState, useEffect } from 'react';\nimport { getRepoData} from '../Sever/Api';\nimport { useParams } from 'react-router-dom';\nimport {  Icon, Image,Card,Button, Form, Checkbox} from 'semantic-ui-react';\nimport './TopRepo.css';\n\nconst TopRepo = () => {\n  const username=useParams().username;\n  const [repoData, setRepoData] = useState([]);\n  const [type, setType] = useState('stargazers_count');\n  useEffect(() => {\n    const fetchRepo = async () => {\n      setRepoData(await getRepoData(username));\n    };\n\n    fetchRepo();\n  }, []);\n\n  repoData.sort((a, b) => {\n        if (type==='stargazers_count'){\n          if (a.stargazers_count > b.stargazers_count) return -1\n          else if (a.stargazers_count < b.stargazers_count) return 1\n          return 0}\n        else if(type==='size')\n        {\n          if (a.size > b.size) return -1\n          else if (a.size < b.size) return 1\n          return 0}\n\n        else\n          {\n            if (a.forks > b.forks) return -1\n            else if (a.forks < b.forks) return 1\n            return 0\n          }\n        }\n      )\n    const handleChange = e => setType(e.target.value);\n    const LIMIT=9\n    return(\n      <div class=\"Sorting\">\n      <label className='repo_sort'>Top Projects Sorting By </label>\n      <form className=\"form\">\n          <input type=\"radio\" name=\"Stars \" label=\"Stars\" checked={type === 'stargazers_count'} value='stargazers_count' onClick={() => setType('stargazers_count')} />\n          <h3> Stars </h3>\n          <input type=\"radio\" name=\"Forks \"label=\"Forks\" checked={type === 'forks'} value='forks' onClick={() => setType('forks')} />\n          <h3>  Forks </h3>\n          <input type=\"radio\" name=\"Size \" label=\"Size\" checked={type === 'size'} value='size' onClick={() => setType('size')} />\n          <h3>  Size </h3>\n      </form>\n\n\n      <Card.Group centered itemsPerRow={3}>\n      {repoData.slice(0,LIMIT).map(repo => (\n          <Card>\n          <Card.Content header={repo.name} />\n          <Card.Content description={repo.description} />\n          <Card.Content extra>\n\n            <Icon name='star' /> {repo.stargazers_count} stars ,\n            <Icon name='fork' /> {repo.forks} forks ,\n            <Icon name='file' /> {repo.size} kb\n\n          </Card.Content>\n        </Card>\n        ))}\n      </Card.Group>\n</div>\n    )\n}\n\nexport default TopRepo;\n","import React from 'react';\nimport Chart from '../components/Chart'\nimport User from '../components/User'\nimport TopRepo from '../components/TopRepo'\nimport Commit from '../components/Commit'\nimport './Main.css'\nconst Main = props => {\n  return (\n    <div className='style'>\n      <User />\n      \n      <Chart />\n      <TopRepo />\n    </div>\n  );\n}\n\nexport default Main;\n","import React, { useState} from \"react\";\nimport { Icon } from 'semantic-ui-react';\n\nimport './UserInput.css';\nimport { useHistory } from \"react-router-dom\";\n\nconst Userinput  = props =>{\n  const [username, setUsername] = useState('leij11');\n  const handleChange = e => setUsername(e.target.value);\n  let history = useHistory();\n  const IconGithub = () => <Icon github name='github' />\n\n  return (\n    <div className='container'>\n      <form className='forms' onSubmit={e => {\n          e.preventDefault();\n          history.push('/'+username+'/profile');\n        }}>\n\n        <label className='label' >\n          <IconGithub/>\n          Enter your github name!\n        </label>\n\n        <input className='input'\n          name=\"username\"\n          type=\"text\"\n          onChange={handleChange}\n        />\n        </form>\n    </div>)\n}\n\nexport default Userinput;\n","import React, { useState } from \"react\";\nimport {BrowserRouter as Router,\n        Route,\n        Switch} from 'react-router-dom';\n\nimport './App.css';\nimport Main from './pages/Main'\nimport UserInput from './pages/Userinput';\n\nconst user= 'leij11';\n\nconst App =()=> {\n    return (\n       <Router>\n         <Switch>\n               <Route path='/main' component={Main} />\n               <Route path='/:username/profile' component={Main} />\n               <Route path='/' component={UserInput} />\n              </Switch>\n      </Router>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}